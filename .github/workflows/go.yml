# This workflow will build a golang project for multiple OS/Arch combinations and run tests on the default platform
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Cross Compile

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.1'

      - name: Run Tests
        run: |
          go test -v ./...
        continue-on-error: false # 确保测试失败时停止后续步骤

  build_and_upload:
    needs: test # 确保测试成功后才开始编译
    runs-on: ubuntu-latest
    strategy:
      matrix:
        osarch:
          - ["linux", "amd64"]
          - ["linux", "arm64"]
          - ["windows", "amd64"]
          - ["darwin", "amd64"]
          - ["darwin", "arm64"]
          # 可以根据需要添加更多组合
      max-parallel: 5 # 最大并发数

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.1'

      - name: Ensure output directory exists
        run: mkdir -p ./bin

      - name: Build for ${{ matrix.osarch[0] }}/${{ matrix.osarch[1] }}
        env:
          GOOS: ${{ matrix.osarch[0] }}
          GOARCH: ${{ matrix.osarch[1] }}
        run: |
          GOOS=${{ matrix.osarch[0] }} GOARCH=${{ matrix.osarch[1] }} go build -v -gcflags="-l" -trimpath -o ./bin/IwaraDownload-${{ matrix.osarch[0] }}-${{ matrix.osarch[1] }} ./main.go

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: IwaraDownload-${{ matrix.osarch[0] }}-${{ matrix.osarch[1] }}
          path: ./bin/IwaraDownload-${{ matrix.osarch[0] }}-${{ matrix.osarch[1] }}